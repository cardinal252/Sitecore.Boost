<?xml version="1.0" encoding="utf-8"?>
<!--

Purpose: This include file enables and configures the content testing features of Sitecore.

-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <settings>
      <!-- CONTENT TESTING - AUTOMATIC CONTENT TESTING - ENABLED
           Determines whether automatic content testing features should be enabled.
           Default value: true
      -->
      <setting name="ContentTesting.AutomaticContentTesting.Enabled" value="true" />
      
      <!-- CONTENT TESTING - ALWAYS SHOW TEST CANDIDATE NOTIFICATION
           Determines whether show test candidate notification is always enabled in the Content Testing.
           Default value: false
      -->
      <setting name="ContentTesting.AlwaysShowTestCandidateNotification" value="false" />

      <!-- CONTENT TESTING - CACHING - ACTIVE TEST CACHE MAXSIZE
           Specifies the maximum size of the ActiveTestCache cache.
           Default value: 512KB
      -->
      <setting name="ContentTesting.Caching.ActiveTestCache.MaxSize" value="512KB" />

      <!-- CONTENT TESTING - COMMAND ROUTE PREFIX
           The prefix used for controller routes.
           Default value: sitecore/shell/api/ct/
      -->
      <setting name="ContentTesting.CommandRoutePrefix" value="sitecore/shell/api/ct/" />

      <!-- CONTENT TESTING - COMMAND ROUTE PREFIX MVC
           The prefix used for controller routes for mvc controllers.
           Default value: sitecore/shell/api/ct/mvc
      -->
      <setting name="ContentTesting.CommandRoutePrefix.Mvc" value="sitecore/shell/ct/" />

      <!-- CONTENT TESTING - DEFAULT CONFIDENCE LEVEL           
           The confidence level used when creating new content tests.
           Default value: 95
      -->
      <setting name="ContentTesting.DefaultConfidenceLevel" value="95" />

      <!-- CONTENT TESTING - DEFAULT TRAFFIC ALLOCATION
           The content test traffic allocation as a percentage.
           Default value: 100
      -->
      <setting name="ContentTesting.DefaultTrafficAllocation" value="100" />

      <!-- CONTENT TESTING - END TEST RULESET
           The path to the ruleset that determines whether a test can finish automatically.
           Default value: /sitecore/system/Settings/Content Testing/End Test Behavior
      -->
      <setting name="ContentTesting.EndTestRuleset" value="/sitecore/system/Settings/Content Testing/End Test Behavior" />

      <!-- CONTENT TESTING - GENERATE SCREENSHOTS 
           Determines when screenshots should be generated.
           Must be one of ( all | limited | none )
           Default value: all
      -->
      <setting name="ContentTesting.GenerateScreenshots" value="all" />
     
      <!-- CONTENT TESTING - MAXIMUM CONTENT TEST DURATION
           The maximum duration in days of a content test.
           
           Default value: 14
      -->
      <setting name="ContentTesting.MaximumContentTestDuration" value ="14" />

      <!-- CONTENT TESTING - MAXIMUM MV TEST DURATION
           The maximum duration in days of a multivariate content test.
           Default value: 90
      -->
      <setting name="ContentTesting.MaximumOptimizationTestDuration" value ="90" />

      <!-- CONTENT TESTING - MINIMUM DURATION
           The minimum duration in days of a content test.
           Default value: 7
      -->
      <setting name="ContentTesting.MinimumDuration" value ="7" />

      <!-- CONTENT TESTING - PHANTOM JS - ENABLE DISK CACHE
           Determines whether the PhantomJS tool should use disk caching for web resources.
           Default value: true
      -->
      <setting name="ContentTesting.PhantomJS.EnableDiskCache" value ="true" />

      <!-- CONTENT TESTING - PHANTOM JS - ENABLE JAVASCRIPT
           Determines whether the PhantomJS tool should allow JavaScript on pages.
           Default value: true
      -->
      <setting name="ContentTesting.PhantomJS.EnableJavaScript" value ="true" />

      <!-- CONTENT TESTING - PHANTOM JS - EXECUTABLE PATH
           The path to the PhantomJS tool that is used to generate screenshots of pages.
           Default value: $(dataFolder)/tools/phantomjs/phantomjs.exe
      -->
      <setting name="ContentTesting.PhantomJS.ExecutablePath" value ="$(dataFolder)/tools/phantomjs/phantomjs.exe" />

      <!-- CONTENT TESTING - PHANTOM JS - IGNORE SSL ERRORS
           Determines whether the PhantomJS tool should ignore errors with SSL when accessing resources.
           Default value: true
      -->
      <setting name="ContentTesting.PhantomJS.IgnoreSSLErrors" value="true"/>

      <!-- CONTENT TESTING - PHANTOM JS - LOAD IMAGES
           Determines whether the PhantomJS tool should load images on pages.
           Default value: true
      -->
      <setting name="ContentTesting.PhantomJS.LoadImages" value ="true" />

      <!-- CONTENT TESTING - PHANTOM JS - LOCK NAVIGATION
           Determines whether the PhantomJS tool will load content from other URLs including iFrames.
           Default value: true
      -->
      <setting name="ContentTesting.PhantomJS.LockNavigation" value ="true" />

      <!-- CONTENT TESTING - PHANTOM JS - SSL PROTOCOL
           The SSL protocol to instruct the PhantomJS tool to use for SSL resources.
           Must be one of ( SSLv3 | SSLv2 | TLSv1 | any )
           Default value: any
      -->
      <setting name="ContentTesting.PhantomJS.SSLProtocol" value ="any"/>

      <!-- CONTENT TESTING - PHANTOM JS - TIMEOUT
           The timeout in milliseconds used when executing calls to PhantomJS
           Default value: 60000
      -->
      <setting name="ContentTesting.PhantomJS.Timeout" value ="60000" />

      <!-- CONTENT TESTING - SCREENSHOT - VIEWPORT - DEFAULT HEIGHT
           The height of the view port used to generate screenshots of pages if not specified in the screenshot task.
           Default value: 800
      -->
      <setting name="ContentTesting.Screenshot.ViewPort.DefaultHeight" value="800"/>
        
      <!-- CONTENT TESTING - SCREENSHOT - VIEWPORT - DEFAULT WIDTH
           The width of the view port used to generate screenshots of pages if not specified in the screenshot task.
           Default value: 1200
      -->
      <setting name="ContentTesting.Screenshot.ViewPort.DefaultWidth" value="1200"/>

      <!-- CONTENT TESTING - SUGGESTED TEST INDEX NAME
           The default suggested test index name.
           Default value: sitecore_suggested_test_index
      -->
      <setting name="ContentTesting.SuggestedTestIndexName" value="sitecore_suggested_test_index"/>
        
      <!-- CONTENT TESTING - SUGGESTED TESTS - MAXIMUM
           The maximum number of suggested tests to show.
           Default value: 50
      -->
      <setting name="ContentTesting.SuggestedTests.Maximum" value ="50"/>

      <!-- CONTENT TESTING - TEST EXTENSION PERIOD
           The number of days that the test can be extended when no winner is found.
           Default value: 14
      -->
      <setting name="ContentTesting.TestExtensionPeriod" value="14" />

      <!-- CONTENT TESTING - TEST STRATEGY
           The default content test strategy.
           Default value: /sitecore/system/Settings/Content Testing/Test Strategies/Subgroup Round Robin Sticky
      -->
      <setting name="ContentTesting.TestStrategy" value="/sitecore/system/Settings/Content Testing/Test Strategies/Subgroup Round Robin Sticky" />

      <!-- CONTENT TESTING - TESTING INDEX NAME
           The default testing index name.
           Default value: sitecore_testing_index
      -->
      <setting name="ContentTesting.TestingIndexName" value ="sitecore_testing_index" />
        
      <!-- CONTENT TESTING - VISITOR - COMBINATION STORAGE
           Specifies the storage mechanism to use for the visitors test combinations.
           Must be one of ( xdbfacet | cookie )
           Default value: xdbfacet
      -->
      <setting name="ContentTesting.Visitor.TestCombinationStorage" value="xdbfacet"/>
      
    </settings>

    <!-- API -->
    <api>
      <services>
        <configuration type="Sitecore.Services.Infrastructure.Configuration.ServicesConfiguration, Sitecore.Services.Infrastructure">
          <allowedControllers hint="list:AddController">
            <allowedController desc="CT_CreateTestDialogController">Sitecore.ContentTesting.Requests.Controllers.CreateTestDialogController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_ActivityController">Sitecore.ContentTesting.Requests.Controllers.Optimization.ActivityController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_DateController">Sitecore.ContentTesting.Requests.Controllers.Optimization.DateController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_ItemInfoController">Sitecore.ContentTesting.Requests.Controllers.Optimization.ItemInfoController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestOutcomesController">Sitecore.ContentTesting.Requests.Controllers.Optimization.TestOutcomesController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestsController">Sitecore.ContentTesting.Requests.Controllers.Optimization.TestsController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_PersonalizationController">Sitecore.ContentTesting.Requests.Controllers.Personalization.PersonalizationController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_ActionController">Sitecore.ContentTesting.Requests.Controllers.TestResults.ActionController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_ReachController">Sitecore.ContentTesting.Requests.Controllers.TestResults.ReachController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestDefinitionController">Sitecore.ContentTesting.Requests.Controllers.TestResults.TestDefinitionController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TopClicksToPagesController">Sitecore.ContentTesting.Requests.Controllers.TestResults.TopClicksToPagesController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TopGoalsController">Sitecore.ContentTesting.Requests.Controllers.TestResults.TopGoalsController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_ContentTestingController">Sitecore.ContentTesting.Requests.Controllers.ContentTestingController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_OptionsMapperController">Sitecore.ContentTesting.Requests.Controllers.OptionsMapperController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_QueryController">Sitecore.ContentTesting.Requests.Controllers.QueryController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestObjectivesController">Sitecore.ContentTesting.Requests.Controllers.TestObjectivesController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestResultsController">Sitecore.ContentTesting.Requests.Controllers.TestResultsController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestThumbnailsController">Sitecore.ContentTesting.Requests.Controllers.TestThumbnailsController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestVariablesController">Sitecore.ContentTesting.Requests.Controllers.TestVariablesController, Sitecore.ContentTesting</allowedController>
            <allowedController desc="CT_TestSummaryController">Sitecore.ContentTesting.Requests.Controllers.TestSummary.TestSummaryController, Sitecore.ContentTesting</allowedController>
          </allowedControllers>
        </configuration>
      </services>
    </api>
    
    <appDependencies>
      <xdb>
        <app id="{2D77A85B-40AD-4376-B44B-1D567B4FE438}" name="Experience Optimization"/>
      </xdb>
      <contentTesting>
        <app id="{2D77A85B-40AD-4376-B44B-1D567B4FE438}" name="Experience Optimization"/>
      </contentTesting>
    </appDependencies>

    <commands>
      <command name="optimization:componentperformance" type="Sitecore.ContentTesting.Commands.ComponentPerformance, Sitecore.ContentTesting" />
      <command name="test:summary" type="Sitecore.ContentTesting.Commands.TestSummary, Sitecore.ContentTesting" />
      <command name="test:createTest" type="Sitecore.ContentTesting.Commands.CreateTest, Sitecore.ContentTesting" />
    </commands>

    <!-- Content Testing Factory configuration
         The types listed here are used by the ContentTestingFactory. Override these settings to override the individual factories.
    -->
    <contentTesting>
      <!-- Concrete implementation types -->
      <contentTestingFactory type="Sitecore.ContentTesting.ContentTestingFactory, Sitecore.ContentTesting" />

      <!-- Content Test Performance Factory implementation type-->
      <contentTestPerformanceFactory type="Sitecore.ContentTesting.Reports.ContentTestPerformanceFactory, Sitecore.ContentTesting" />

      <!-- Content Test Store implementation type -->
      <contentTestStore type="Sitecore.ContentTesting.Data.SitecoreContentTestStore, Sitecore.ContentTesting" />

      <editModeContext type="Sitecore.ContentTesting.Editing.EditModeContext, Sitecore.ContentTesting" />

      <forceWinnerBehaviorFactory type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForcedWinnerBehaviorFactory, Sitecore.ContentTesting">
        <forceWinnerBehaviors hint="raw:AddBehaviorRaw">
          <new name="New" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceNewExperienceWinner, Sitecore.ContentTesting" />
          <original name="Original" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceOriginalExperienceWinner, Sitecore.ContentTesting" />
        </forceWinnerBehaviors>
      </forceWinnerBehaviorFactory>

      <personalizationTestStore type="Sitecore.ContentTesting.Data.SitecorePersonalizationTestStore, Sitecore.ContentTesting" />

      <personalizationTracker type="Sitecore.ContentTesting.Analytics.PersonalizationTracker, Sitecore.ContentTesting"/>

      <personalizationService type="Sitecore.ContentTesting.Services.PersonalizationService, Sitecore.ContentTesting">
        <param desc="contentTestStore" ref="contentTesting/contentTestStore" />
        <param desc="personalizationConfiguration" ref="contentTesting/personalizationTestStore" />
        <param desc="performanceFactory" ref="contentTesting/contentTestPerformanceFactory" />
        <param desc="testValueInspector" type="Sitecore.ContentTesting.Inspectors.TestValueInspector, Sitecore.ContentTesting" />
      </personalizationService>

      <screenshotContextFactory type="Sitecore.ContentTesting.Screenshot.ScreenshotContextFactory, Sitecore.ContentTesting" />

      <screenshotGenerator type="Sitecore.ContentTesting.Screenshot.ScreenshotGenerator, Sitecore.ContentTesting" singleInstance="true" />

      <testingSearch type="Sitecore.ContentTesting.ContentSearch.TestingSearch, Sitecore.ContentTesting" />

      <testCombinationContext type="Sitecore.ContentTesting.Web.TestCombinationContext, Sitecore.ContentTesting">
        <param desc="httpContext" />
      </testCombinationContext>

      <testingTracker type="Sitecore.ContentTesting.Analytics.TestingTracker, Sitecore.ContentTesting"/>

      <testRunEstimator type="Sitecore.ContentTesting.Data.TestRunEstimator, Sitecore.ContentTesting" />
    </contentTesting>

    <!-- Email templates used for test notifications -->
    <emailTemplateCreators>
      <template name="WinnerFound" type="Sitecore.ContentTesting.Notifications.Creators.WinnerFoundTemplateCreator, Sitecore.ContentTesting">
        <templateFile>/sitecore/shell/Applications/Notification/EmailTemplates/WinnerFound.html</templateFile>
      </template>
      <template name="NoWinner" type="Sitecore.ContentTesting.Notifications.Creators.NoWinnerTemplateCreator, Sitecore.ContentTesting">
        <templateFile>/sitecore/shell/Applications/Notification/EmailTemplates/NoWinner.html</templateFile>
      </template>
      <template name="Rollback" type="Sitecore.ContentTesting.Notifications.Creators.RollbackTemplateCreator, Sitecore.ContentTesting">
        <templateFile>/sitecore/shell/Applications/Notification/EmailTemplates/RollbackPrevious.html</templateFile>
      </template>
    </emailTemplateCreators>

    <events>
      <!-- PRE-EMPTIVE SCREENSHOT GENERATION - LOCAL
           Enable the following event handler to generate screenshot files as items change thus reducing wait time
           within the UI when screenshots are displayed.
           This handler only works on CM instances. Never enable it on any other Sitecore instance.
      -->
      <!--<event name="item:saved">
        <handler type="Sitecore.ContentTesting.Events.GenerateScreenshot, Sitecore.ContentTesting" method="OnItemSaved">
          <excludeFields hint="list:ExcludeFieldFromComparison">
            <created>__created</created>
            <createdby>__created by</createdby>
            <updated>__updated</updated>
            <updatedby>__updated by</updatedby>
            <revision>__revision</revision>
            <sortorder>__sortorder</sortorder>
            <validfrom>__valid from</validfrom>
            <workflow>__workflow</workflow>
            <workflowstate>__workflow state</workflowstate>
            <lock>__lock</lock>
            <pageleveltestsetdefinition>__Page Level Test Set Definition</pageleveltestsetdefinition>
          </excludeFields>
        </handler>
      </event>-->
      <!-- PRE-EMPTIVE SCREENSHOT GENERATION - REMOTE
           Enable the following event handler to generate screenshot files as remote items change thus reducing wait time
           within the UI when screenshots are displayed.
           This handler only works on CM instances. Never enable it on any other Sitecore instance.
      -->
      <!--<event name="item:saved:remote">
        <handler type="Sitecore.ContentTesting.Events.GenerateScreenshot, Sitecore.ContentTesting" method="OnRemoteItemSaved">
          <excludeFields hint="list:ExcludeFieldFromComparison">
            <created>__created</created>
            <createdby>__created by</createdby>
            <updated>__updated</updated>
            <updatedby>__updated by</updatedby>
            <revision>__revision</revision>
            <sortorder>__sortorder</sortorder>
            <validfrom>__valid from</validfrom>
            <workflow>__workflow</workflow>
            <workflowstate>__workflow state</workflowstate>
            <lock>__lock</lock>
            <pageleveltestsetdefinition>__Page Level Test Set Definition</pageleveltestsetdefinition>
          </excludeFields>
        </handler>
      </event>-->
    
      <event name="item:bucketing:starting">
        <handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="PauseIndexing"/>
      </event>
    
      <event name="item:bucketing:ending">
        <handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="ResumeIndexing"/>
      </event>
    
      <event name="item:unbucketing:starting">
        <handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="PauseIndexing"/>
      </event>
    
      <event name="item:unbucketing:ending">
        <handler type="Sitecore.ContentTesting.Events.PauseIndexingOnBucketing, Sitecore.ContentTesting" method="ResumeIndexing"/>
      </event>

      <event name="publish:end">
        <!-- ACTIVE TEST CACHE CLEARER
           This event handler clears data from the ActiveTest cache
        -->
        <handler type="Sitecore.ContentTesting.Events.ActiveTestCacheClearer, Sitecore.ContentTesting" method="Process" />
      </event>
      <event name="publish:end:remote">
        <!-- ACTIVE TEST CACHE CLEARER
           This event handler clears data from the ActiveTest cache
        -->
        <handler type="Sitecore.ContentTesting.Events.ActiveTestCacheClearer, Sitecore.ContentTesting" method="Process" />
      </event>
    </events>

    <!-- Behaviours used when forcing a test winner -->
    <forceWinnerBehaviors>
      <behavior name="New" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceNewExperienceWinner, Sitecore.ContentTesting" />
      <behavior name="Original" type="Sitecore.ContentTesting.Rules.ForceWinnerBehavior.ForceOriginalExperienceWinner, Sitecore.ContentTesting" />
    </forceWinnerBehaviors>

    <model>
      <elements>
        <element interface="Sitecore.ContentTesting.Model.Entities.ITestCombinationsData, Sitecore.ContentTesting.Model" implementation="Sitecore.ContentTesting.Model.Entities.TestCombinationsData, Sitecore.ContentTesting.Model"/>
      </elements>
      <entities>
        <contact>
          <facets>
            <facet name="TestCombinations" contract="Sitecore.ContentTesting.Model.Entities.ITestCombinationsData, Sitecore.ContentTesting.Model" />
          </facets>
        </contact>
      </entities>
    </model>

    <pipelines>
      <!-- ADD PERSONALIZATION VARIABLES
           Loads and filters the personalization test variables in the test set
      -->
      <addPersonalizationVariables>
        <processor type="Sitecore.ContentTesting.Pipelines.AddPersonalizationVariables.FilterRules, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.AddPersonalizationVariables.AddRules, Sitecore.ContentTesting" />
      </addPersonalizationVariables>
      
      <!-- CALCULATE TEST SCORE
           Calculates the score for the test
      -->
      <calculateTestScore>
        <processor type="Sitecore.ContentTesting.Pipelines.CalculateTestScore.GetAveragePageViews, Sitecore.ContentTesting">
          <QueryDays>30</QueryDays>
        </processor>
        <processor type="Sitecore.ContentTesting.Pipelines.CalculateTestScore.CalculateBestEffect, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CalculateTestScore.CalculateTestScore, Sitecore.ContentTesting" />
      </calculateTestScore>

      <!-- CAN CANCEL TEST
           Determine if a test can be cancelled
      -->
      <canCancelTest>
        <processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsAdmin, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsTestOwner, Sitecore.ContentTesting" />
      </canCancelTest>
      
      <!-- CANCEL TEST
           Cancels a test and reverts test candidates back to their original state
      -->
      <cancelTest>
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.CheckCanCancelTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.ProcessTestWorkflow, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.CreateHistoricalTestData, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.RevertContent, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.PublishHostItem, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.RemoveDraftTestDefinition, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CancelTest.ClearFromCache, Sitecore.ContentTesting" />
      </cancelTest>

      <!-- CAN STOP TEST
           Determine if a test can be stopped
      -->
      <canStopTest>
        <processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsAdmin, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.CanControlTest.IsTestOwner, Sitecore.ContentTesting" />
      </canStopTest>

      <!-- DETERMINE TEST EXPOSURE
           Determine if a user should be exposed to a test
      -->
      <determineTestExposure>
        <processor type="Sitecore.ContentTesting.Pipelines.DetermineTestExposure.ModularTrafficAllocation, Sitecore.ContentTesting" />
      </determineTestExposure>

      <!-- DETERMINE TEST OWNER
           Identifies the user who owns a test
      -->
      <determineTestOwner>
        <processor type="Sitecore.ContentTesting.Pipelines.DetermineTestOwner.GetFromContext, Sitecore.ContentTesting"/>
        <!-- Enable this processor if you want to determine test owner by the workflow states transition user.
             You just need to specify the transitional workflow states that are used as from workflow states and
             the order of the transition history. -->
        <!--<processor type="Sitecore.ContentTesting.Pipelines.DetermineTestOwner.GetFromWorkflowHistory, Sitecore.ContentTesting">
          <TransitionalWorkflowStates hint="list:AddTransitionalWorkflowState">
            <WorkflowState>/sitecore/system/Workflows/Sample Workflow/Draft</WorkflowState>
          </TransitionalWorkflowStates>
          <FirstTransition>true</FirstTransition>
        </processor>-->
        <!-- Enable this processor if you want to determine test owner by the [Updated By] field of the host item.-->
        <!--<processor type="Sitecore.ContentTesting.Pipelines.DetermineTestOwner.GetFromStatistics, Sitecore.ContentTesting" />-->
      </determineTestOwner>

      <!-- GENERATE VARIANT DESCRIPTION
           Generate a user friendly description for the variant in the experience.
      -->
      <generateVariantDescription>
        <processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetPageVersionTestDescription, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetContentTestTestDescription, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetComponentTestDescription, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GenerateVariantDescription.GetPersonalizationTestDescription, Sitecore.ContentTesting" />
      </generateVariantDescription>

      <getChromeData>
        <processor type="Sitecore.ContentTesting.Pipelines.GetChromeData.GetRenderingTestVariations, Sitecore.ContentTesting" patch:after="processor[@type='Sitecore.Pipelines.GetChromeData.GetRenderingChromeData, Sitecore.Kernel']" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetChromeData.GetOptimizationRenderingChromeData, Sitecore.ContentTesting" patch:after="processor[@type='Sitecore.Pipelines.GetChromeData.GetRenderingChromeData, Sitecore.Kernel']" />
      </getChromeData>

      <getContentEditorWarnings>
        <processor type="Sitecore.ContentTesting.Pipelines.GetContentEditorWarnings.GetContentTestingWarnings, Sitecore.ContentTesting" />
      </getContentEditorWarnings>

      <!-- GET CURRENT TEST COMBINATION
           Returns a test combination to expose to the current visitor.
      -->
      <getCurrentTestCombination>
        <processor type="Sitecore.ContentTesting.Pipelines.GetCurrentTestCombination.GetLatestTestingItemVersion, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetCurrentTestCombination.LoadTestSet, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetCurrentTestCombination.GetTestStrategyCombination, Sitecore.ContentTesting" />
      </getCurrentTestCombination>

      <!-- GET DATASOURCE WARNINGS FOR TEST
           Inspect an item being used as a datsource in a test and raise issues that could prevent it from acting within the test
      -->
      <getDatasourceWarningsForTest>
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Publishable, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.PublishingRestrictions, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Workflow, Sitecore.ContentTesting">
          <InspectHostItem>false</InspectHostItem>
        </processor>
      </getDatasourceWarningsForTest>

      <!-- GET ITEM WARNINGS FOR TEST
           Inspect an item being added to a page version test and raise issues that could prevent it from acting within the test
      -->
      <getItemWarningsForTest>
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Publishable, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.PublishingRestrictions, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Workflow, Sitecore.ContentTesting" >
          <InspectHostItem>true</InspectHostItem>
        </processor>
        <processor type="Sitecore.ContentTesting.Pipelines.GetItemWarningsForTest.Presentation, Sitecore.ContentTesting" />
      </getItemWarningsForTest>

      <!-- GET VERSIONED TEST CANDIDATES
           Inspect an item with workflow and identify test candidates for it
      -->
      <getNonVersionedTestCandidates>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetComponentTestCandidiates, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetPersonalizationTestCandidates, Sitecore.ContentTesting" />
      </getNonVersionedTestCandidates>

      <getPageEditorNotifications>
        <processor type="Sitecore.ContentTesting.Pipelines.GetPageEditorNotifications.GetContentTestingNotifications, Sitecore.ContentTesting" />
      </getPageEditorNotifications>

      <getRenderingRules>
        <processor type="Sitecore.ContentTesting.Pipelines.GetRenderingRules.FilterForEditing, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Analytics.Pipelines.GetRenderingRules.FilterForEditing, Sitecore.Analytics']" />
      </getRenderingRules>

      <!-- GET SCEENSHOT
           Generate and scale screenshots
      -->  
      <getScreenshot>
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.GenerateFilename, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.CheckCachedImage, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.CheckDisabler, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.GenerateScreenshotFile, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenshot.ScaleImage, Sitecore.ContentTesting" />
      </getScreenshot>

      <!-- GET SCREEN SHOT FOR URL
           Generate a screenshot for a page
      -->
      <getScreenShotForURL>
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.GenerateFilename, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.CheckCachedImage, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.CheckDisabler, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.PopulateUrlParameters, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.LoadUrl, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.RenderScripts, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.WriteScriptToDisk, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.GenerateScreenShot, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetScreenShotForURL.DeleteScript, Sitecore.ContentTesting" />
      </getScreenShotForURL>

      <!-- GET TESTS
           Inspect an item and identify all tests for it
      -->
      <getTests>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetPageLevelTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetContentTests, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetComponentTests, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTests.GetPersonalizationTests, Sitecore.ContentTesting" />
      </getTests>

      <!-- GET TEST CANDIDATE VARIANT DESCRIPTION
           Generate a user friendly description for a test candidate variant
      -->
      <getTestCandidateVariantDescription>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.TestType, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.Path, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.Rendering, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidateVariantDescription.Rules, Sitecore.ContentTesting" />
      </getTestCandidateVariantDescription>

      <!-- GET TEST OBJECTIVES
           Locate options to list as objectives of a test
      -->
      <getTestObjectives>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestObjectives.GetDefaults, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestObjectives.GetGoals, Sitecore.ContentTesting" />
      </getTestObjectives>
      
      <!-- GET TEST TO RUN
           Inspect an item for a test to run
      -->
      <getTestToRun>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromCache, Sitecore.ContentTesting"/>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromQueryString, Sitecore.ContentTesting"/>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromFinalLayout, Sitecore.ContentTesting"/>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromField, Sitecore.ContentTesting">
          <param desc="fieldId">{8546D6E6-0749-4591-90F3-CEC033D6E8D8}</param> <!-- Page Level Test Definition -->
        </processor>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromField, Sitecore.ContentTesting">
          <param desc="fieldId">{700F4AAD-AD3B-4058-8673-A0CEE765A1F7}</param> <!-- Content Test -->
        </processor>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.GetFromVisualization, Sitecore.ContentTesting"/>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.EnsurePageTest, Sitecore.ContentTesting"/>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.CheckDevice, Sitecore.ContentTesting"/>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.EnsureCorrectLanguage, Sitecore.ContentTesting">
          <excludeFields hint="list:AddExcludeVariableTemplateId">
            <pageLevel>{AB86861A-6030-46C5-B394-E8F99E8B87DB}</pageLevel>
          </excludeFields>
        </processor>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestToRun.SetCache, Sitecore.ContentTesting"/>
      </getTestToRun>
      
      <!-- GET VERSIONED TEST CANDIDATES
           Inspect an item with workflow and identify test candidates for it
      -->
      <getVersionedTestCandidates>
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetComponentTestCandidiates, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetPersonalizationTestCandidates, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.GetTestCandidates.GetPageVersionTestCandidates, Sitecore.ContentTesting">
          <IgnoreRuleChanges>True</IgnoreRuleChanges>
          <IgnoreComponentTestChanges>True</IgnoreComponentTestChanges>
          <excludeFields hint="list:ExcludeFieldFromComparison">
            <created>__created</created>
            <createdby>__created by</createdby>
            <updated>__updated</updated>
            <updatedby>__updated by</updatedby>
            <revision>__revision</revision>
            <sortorder>__sortorder</sortorder>
            <validfrom>__valid from</validfrom>
            <workflow>__workflow</workflow>
            <workflowstate>__workflow state</workflowstate>
            <lock>__lock</lock>
            <pageleveltestsetdefinition>__Page Level Test Set Definition</pageleveltestsetdefinition>
            <renderings>__Renderings</renderings>
            <finalrenderings>__Final Renderings</finalrenderings>
          </excludeFields>
        </processor>
      </getVersionedTestCandidates>

      <httpRequestBegin>
        <processor type="Sitecore.ContentTesting.Pipelines.HttpRequest.SetReadOnlySessionStateForScreenshot, Sitecore.ContentTesting" patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']" />
        <processor type="Sitecore.ContentTesting.Pipelines.HttpRequest.ForcedEditingTestCombination, Sitecore.ContentTesting" patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']" />        
      </httpRequestBegin>

      <initialize>
        <processor type="Sitecore.ContentTesting.Pipelines.Initialize.RegisterContentTestingCommandRoute, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Mvc.Pipelines.Loader.InitializeRoutes, Sitecore.Mvc']" />
        <processor type="Sitecore.ContentTesting.Pipelines.Initialize.RegisterWebApiRoutes, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Mvc.Pipelines.Loader.InitializeRoutes, Sitecore.Mvc']" />
        <processor type="Sitecore.Pipelines.Initialize.PrecompileSpeakViews, Sitecore.Speak.Client" use="ContentTesting">
          <Paths>/sitecore/shell/client/Applications/ContentTesting</Paths>
        </processor>
      </initialize>

      <insertRenderings>
        <processor type="Sitecore.ContentTesting.Pipelines.InsertRenderings.GetLatestTestingItem, Sitecore.ContentTesting" patch:after="processor[@type='Sitecore.Pipelines.InsertRenderings.Processors.GetItem, Sitecore.Kernel']" />
        <processor type="Sitecore.ContentTesting.Pipelines.InsertRenderings.Testing, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Pipelines.InsertRenderings.Processors.EvaluateConditions, Sitecore.Kernel']" />
      </insertRenderings>
      
      <itemWebApiSearch>
        <processor patch:after="processor[@type='Sitecore.ItemWebApi.Pipelines.Search.FilterItems, Sitecore.Speak.ItemWebApi']" type="Sitecore.ContentTesting.Pipelines.ItemWebApiSearch.FilterLatestVersion, Sitecore.ContentTesting" />
      </itemWebApiSearch>

      <publishVersion>
        <processor type="Sitecore.ContentTesting.Pipelines.PublishVersion.PublishTestingVersions, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Publishing.Pipelines.PublishVersion.Processors.RemoveOtherVersions, Sitecore.Kernel']" />
      </publishVersion>

      <renderDeviceEditorRendering>
        <processor type="Sitecore.ContentTesting.Pipelines.RenderDeviceEditorRendering.ComponentTestIndicator, Sitecore.ContentTesting" />
      </renderDeviceEditorRendering>

      <renderField>
        <processor type="Sitecore.ContentTesting.Pipelines.RenderField.HighlightContentChange, Sitecore.ContentTesting" patch:after="processor[@type='Sitecore.Pipelines.RenderField.AddBeforeAndAfterValues, Sitecore.Kernel']" />
      </renderField>

      <renderLayout>
        <processor type="Sitecore.ContentTesting.Pipelines.RenderLayout.EvaluateTestExposure, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Pipelines.RenderLayout.InsertRenderings, Sitecore.Kernel']" />
          <processor type="Sitecore.ContentTesting.Pipelines.RenderLayout.PageLevelTestItemResolver, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Pipelines.RenderLayout.InsertRenderings, Sitecore.Kernel']" />
        <processor type="Sitecore.ContentTesting.Pipelines.RenderLayout.ContentTestDataSourceResolver, Sitecore.ContentTesting" patch:before="processor[@type='Sitecore.Pipelines.RenderLayout.InsertRenderings, Sitecore.Kernel']" />
      </renderLayout>

      <renderLayoutGridRendering>
        <processor type="Sitecore.ContentTesting.Pipelines.RenderLayoutGridRendering.ComponentTestIndicator, Sitecore.ContentTesting" />
      </renderLayoutGridRendering>

      <renderingRuleEvaluated>
        <processor type="Sitecore.ContentTesting.Pipelines.RenderingRuleEvaluated.TestingRule, Sitecore.ContentTesting" />
      </renderingRuleEvaluated>

      <renderRulePlaceholder.afterAction>
        <!-- Enable these processors to view personalization data for each rule in the personalization dialog -->
        <!-- Processor to display reach (exposure) for rule in rules editor -->
        <!--<processor type="Sitecore.ContentTesting.Pipelines.RenderRulePlaceholder.AfterAction.Reach, Sitecore.ContentTesting" />-->
        <!-- Processor to display effect of the rule in the rules editor -->
        <!--<processor type="Sitecore.ContentTesting.Pipelines.RenderRulePlaceholder.AfterAction.Effect, Sitecore.ContentTesting" />-->
      </renderRulePlaceholder.afterAction>

      <!-- REVERT CONTENT
           Remove a test from an item and revert content to its original state
      -->
      <revertContent>
        <processor type="Sitecore.ContentTesting.Pipelines.RevertContent.IdentifyHostItem, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.RevertContent.AddVersionToHost, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.RevertContent.ContentTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.RevertContent.PageLevelTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.RevertContent.ComponentTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.RevertContent.PersonalizationTest, Sitecore.ContentTesting" />
      </revertContent>

      <!-- SAVE TEST OUTCOME
           Process and save outcome data of the test
      -->
      <saveTestOutcome>
        <processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.AddSummaryNotification, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.GenerateTestOutcome, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.DetermineTestOwner, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.SaveTestOutcome.WriteTestOutcome, Sitecore.ContentTesting" />
      </saveTestOutcome>

      <!-- SESSIOND END
           Performs cleanup on session end
      -->
      <sessionEnd>
        <processor type="Sitecore.ContentTesting.Pipelines.SessionEnd.CleanupPreservedWorkflowArgs, Sitecore.ContentTesting" />
      </sessionEnd>

      <speak.client.initialize.layout>
        <processor mode="on" type="Sitecore.ContentTesting.Pipelines.InitializeSpeakLayout.AuthorizeContentTestingAccess, Sitecore.ContentTesting"/>
      </speak.client.initialize.layout>
      
      <!-- START PAGE TEST
           Starts the page test
      -->
      <startPageTest>
        <processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.DeployPageTestDependencies, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.DeployComponentTestDependencies, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.ProtectTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.DeployTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartPageTest.ClearActiveTestCacheForHost, Sitecore.ContentTesting" />
      </startPageTest>

      <!-- START TEST
           Starts a test
      -->
      <startTest>
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.SetTestSettings, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.EnsureTestCandidates, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.DisableTestElements, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.ResolveTestLanguage, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.DetermineTestOwner, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.SetTestObjective, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.DetermineDeviceBound, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.CreateTestDefinition, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.ProtectTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.Deploy, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StartTest.ClearActiveTestCacheForHost, Sitecore.ContentTesting" />
      </startTest>

      <!-- STOP TEST
           Stops the test
      -->
      <stopTest>
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.StoreWinnerCombination, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.ProcessTestWorkflow, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.CreatePageLevelWinnerVersion, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.EnsureValidWinner, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.CreateHistoricalTestData, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.RemoveContentTests, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.SetupWinnerComponents, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.RemovePoorPerformingRules, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.PublishWinner, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.StopTest.RunClustering, Sitecore.ContentTesting" />
      </stopTest>

      <!-- SUGGEST TESTS
           Inspect an item and suggest tests which may be run against it
      -->
      <suggestTests>
        <processor type="Sitecore.ContentTesting.Pipelines.SuggestTests.HasNeverBeenTested, Sitecore.ContentTesting" />
      </suggestTests>

      <!-- SUSPEND TEST
           Suspend the test.
      -->
      <suspendTest>
        <processor type="Sitecore.ContentTesting.Pipelines.SuspendTest.ProcessTestWorkflow, Sitecore.ContentTesting" />
      </suspendTest>

      <!-- VALIDATE DATA SOURCE CONFIGURATION
           Validates whethr data source for specified Test Value Item is not corrupted.
      -->
      <validateDataSourceConfiguration>
        <processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidateContentTestDataSource, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidatePageTestDataSource, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidateComponentTestDataSource, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.ValidateDataSourceConfiguration.ValidatePersonalizationTestDataSource, Sitecore.ContentTesting" />
        
      </validateDataSourceConfiguration>

      <!-- VALIDATE STOP ACTION
           Validates whether it's possible to stop the test.
      -->
      <validateStopAction>
        <processor type="Sitecore.ContentTesting.Pipelines.ValidateStopAction.ValidateUserCanStopTest, Sitecore.ContentTesting" />
        <processor type="Sitecore.ContentTesting.Pipelines.ValidateStopAction.ValidatePageTestTemplate, SItecore.ContentTesting" />
      </validateStopAction>

      <speak.client.resolveScript>
        <processor type="Sitecore.Resources.Pipelines.ResolveScript.Controls, Sitecore.Speak.Client">
          <sources hint="raw:AddSource">
            <source folder="/sitecore/shell/client/Applications/ContentTesting" deep="true" category="contenttesting" pattern="*.js,*.css" />
            <source folder="/sitecore/shell/client/Sitecore/ContentTesting" deep="true" category="contenttesting" pattern="*.js,*.css" />
          </sources>
        </processor>
      </speak.client.resolveScript>

      <group name="itemProvider" groupName="itemProvider">
        <pipelines>
          <getItem>
            <processor type="Sitecore.ContentTesting.Pipelines.ItemProvider.GetItem.GetItemUnderTestProcessor, Sitecore.ContentTesting" />
          </getItem>
        </pipelines>
      </group>
    </pipelines>

    <processors>
      <uiDeleteItems>
        <processor mode="on" type="Sitecore.ContentTesting.Pipelines.DeleteItems.DeleteTestDefinitionItems,Sitecore.ContentTesting" 
                   method="CheckActiveTests"
                   patch:before="processor[@method='UncloneItems']" />
      </uiDeleteItems>
    </processors>

    <scheduling>
      <agent type="Sitecore.Tasks.CleanupAgent" method="Run">
        <files hint="raw:AddCommand">
          <remove folder="$(tempFolder)/screenshots" pattern="*.*" maxAge="7.00:00:00" recursive="true" />
        </files>
      </agent>
    </scheduling>

    <sitecore.experienceeditor.speak.requests>
    <request name="Optimization.ItemVersions.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ItemVersionsCountRequest, Sitecore.ContentTesting" />
      <request name="Optimization.ActiveTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ActiveTestsCountRequest, Sitecore.ContentTesting" />
      <request name="Optimization.ActiveItemTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ActiveItemTestsCountRequest, Sitecore.ContentTesting" />
      <request name="Optimization.ActiveItemTest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ItemHasActiveTestRequest, Sitecore.ContentTesting"/>
      <request name="Optimization.HistoricalTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.HistoricalTestsCountRequest, Sitecore.ContentTesting" />
      <request name="Optimization.IsContentTestingEnabledRequest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.IsContentTestingEnabledRequest, Sitecore.ContentTesting" />
      <request name="Optimization.SuggestedTests.Count" type="Sitecore.ContentTesting.Requests.ExperienceEditor.SuggestedTestsCountRequest, Sitecore.ContentTesting" />
      <request name="ContentTesting.PersonalizationGallery.CanExecute" type="Sitecore.ContentTesting.Requests.ExperienceEditor.PersonalizationGalleryState, Sitecore.ContentTesting" />
      <request name="OptimizationView.Toogle.GetUrl" type="Sitecore.ContentTesting.Requests.ExperienceEditor.ToogleOptimizationViewRequest, Sitecore.ContentTesting" />
      <!-- Delete -->
      <request name="ExperienceEditor.Delete.CheckActiveTestsRequest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.Delete.CheckActiveTestsRequest, Sitecore.ContentTesting"/>
      <request name="ExperienceEditor.Delete.DeleteActiveTestsRequest" type="Sitecore.ContentTesting.Requests.ExperienceEditor.Delete.DeleteActiveTestsRequest, Sitecore.ContentTesting"/>
      <!-- Delete -->
    </sitecore.experienceeditor.speak.requests>
  </sitecore>
</configuration>