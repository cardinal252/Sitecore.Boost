<?xml version="1.0" encoding="utf-8" ?>
<!--

Purpose: This include file configures the server side logging of the JavaScript client side events.

-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <pipelines>
      <initialize>
        <processor type="Sitecore.Pipelines.Loader.InitializeJSNLog, Sitecore.Kernel"/>
      </initialize>
    </pipelines>

    <log4net>
      <appender name="ClientLogAppender" type="log4net.Appender.SitecoreLogFileAppender, Sitecore.Logging">
        <file value="$(dataFolder)/logs/Client.log.{date}.txt" />
        <appendToFile value="true" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
        </layout>
        <encoding value="utf-8" />
      </appender>
      <logger name="ClientRoot" additivity="false">
        <level value="INFO" />
        <appender-ref ref="ClientLogAppender" />
      </logger>
    </log4net>
    
    <!-- JSNLOG
          The root element for all JSNLog configuration elements (see http://jsnlog.com/Documentation/WebConfig/JSNLog).
          
          Supported attributes:
          
            enabled:                   If false, all loggers are disabled. Default: true.
            maxMessages:               Limits total number of messages sent to the server. Default: no maximum.
            
            defaultAjaxUrl:            Provides the default url if no url is set on the <ajaxAppender> Element. Also sets the url for the default appender.
                                       If defaultAjaxUrl is not set, the url /jsnlog.logger is used.
                                       However, if your site sits in an application below the root application, then it will have a url like http://domain.com/site rather than http://domain.com.
                                       JSNLog caters for this situation by adding the application path to the default url, resulting in a default url like /site/jsnlog.logger.
            
            serverSideLogger:          By default, all log messages from your JavaScript code are passed on to your server side logging package with the name of the JavaScript logger.
                                       However, if you want to use a specific logger name for all your JavaScript log messages, you can specify that with this attribute.                                      
            
            serverSideLevel:           By default, all log messages from your JavaScript code are passed on to your server side logging package with the same level as the original JavaScript log message.
                                       However, if you want to use a specific level, you can specify that with this attribute.
                                       Default: %message.
            
            serverSideMessageFormat:  
                                       Placeholder        Is replaced by
                                       %message           Original message given to the JavaScript logger.
                                       %jsonmessage       Original message given to the JavaScript logger, as a valid JSON value.
                                       %utcDate           Date and time in UTC when the message was generated, according to the client's clock.
                                       %utcDateServer     Date and time in UTC when the message was received by the server, according to the server's clock.
                                       %date              Date and time when the message was generated, according to the client's clock. This equals %utcDate converted to the server's local time.
                                       %dateServer        Date and time in the server's local time when the message was received by the server, according to the server's clock.
                                       %level             Level of the message, as provided by the JavaScript code.
                                       %userAgent         Identifies the make of the browser.
                                       %userHostAddress   IP address of the sender.
                                       %url               Url of the page on which the message was generated.
                                       %logger            JavaScript logger that generated the message.
                                       %requestId         Identifies the request for which the log message was created.
                                       %newline           Newline character.
            
            productionLibraryPath:     Path to the jsnlog.js file. JSNLog generates a <script> tag with this url.
            
            sendBatchInterval:         Allows to send messages that are stored in a batch after the specified period of time defined in milliseconds.
                                       If set to 0, messages in the batch are sent to the server once the amount of messages is equal to batchSize which is specified in the corresponding appender.
                                       Default: 0.
                                       
                                       Note: It is not a standard JSNLog attribute. 
                                       
            maxMessageLength:          Allows to limit the length of a logging message. If set to 0, there is no limit.
                                       Default: 0.
                                       
                                       Note: It is not a standard JSNLog attribute.
    -->
    <jsnlog enabled="true"
            productionLibraryPath="~/sitecore/shell/controls/lib/jsnlog/jsnlog.min.js"
            serverSideMessageFormat="%message | SessionId-RequestId: %requestId | PageUrl: %url | UserAgent: %userAgent"
            sendBatchInterval="1000"
            maxMessageLength="5000"
            maxMessages="20">
      <!-- AJAXAPPENDER
           An AjaxAppender sends log messages to the server (see http://jsnlog.com/Documentation/WebConfig/JSNLog/AjaxAppender).
           Loggers do not process log messages themselves. Instead, they pass them on to an appender.
           JSNLog creates a default appender, so there is no need to create one yourself in order to start logging.
  
           Supported attributes:
           
           name:                       Name of the AjaxAppender you want to configure.
           level:                      Only log messages with a severity equal or higher than this can be sent to the server. Default: DEBUG.
           userAgentRegex:             If not empty, log messages only get processed if this regular expression matches the user agent string of the browser.
           ipRegex:                    If not empty, log messages only get processed if this regular expression matches the IP address of the browser.
           disallow:                   If not empty, log messages are suppressed if they match this regular expression. If an object is being logged, it is converted to a JSON string, which is then matched.
           
           storeInBufferLevel:         If the severity of the log message is equal or greater than this, but smaller than level, the log message will not be sent to the server, but stored in an internal buffer.
                                       If bufferSize is 0 or less, the log message is simply ignored. Default: ALL.
                                       
           sendWithBufferLevel:        If the severity of a log message is equal or greater than this, not only the log message but also all log messages stored in the internal buffer will be sent to the server.
                                       This allows you to store low priority trace messages in the internal buffer, and only send them when a high priority fatal message is sent. Default: OFF.
           
           bufferSize:                 Sets the size of the buffer used with sendWithBufferLevel and storeInBufferLevel. Default: 0.
           batchSize:                  Allows you to improve performance by sending multiple log messages in one go, rather than one by one. Default: 1.
           url:                        All log messages will be sent to this URL. The default url is as expected by the server side code of JSNLog.
      -->
      <ajaxAppender name="ajaxAppender" level="ERROR" storeInBufferLevel="DEBUG" sendWithBufferLevel="ERROR" bufferSize="20" batchSize="10" />
      <!-- CONSOLEAPPENDER
           The ConsoleAppender sends log messages to console.log (see http://jsnlog.com/Documentation/WebConfig/JSNLog/ConsoleAppender)
           ConsoleAppender could be configured the same way as the ajaxAppender node, however, there is no URL attribute to configure. 
      -->
      <consoleAppender name="consoleAppender" />
      <!-- LOGGER
           Configures a logger (see http://jsnlog.com/Documentation/WebConfig/JSNLog/Logger).
           
           Supported attributes:
           
           name:                   Name of the logger you want to configure. To configure the root logger, simply omit the name attribute.
                                   In server side logs, the root logger is called ClientRoot.
                                   
           level:                  Only log messages with a severity equal or higher than this can be sent to the server.
           userAgentRegex:         If not empty, log messages only get processed if this regular expression matches the user agent string of the browser.
           ipRegex:                If not empty, log messages only get processed if this regular expression matches the IP address of the browser.
           disallow:               If not empty, log messages are suppressed if they match this regular expression. If an object is being logged, it is converted to a JSON string, which is then matched.
           appenders:              One or more appenders for the logger to send its log messages to.
           onceOnly:               One or more regular expressions. When a message matches a regular expression, then any subsequent messages matching that same regular expression will be suppressed.
           
      -->
      <logger appenders="ajaxAppender;consoleAppender" />
    </jsnlog>
  </sitecore>
</configuration>